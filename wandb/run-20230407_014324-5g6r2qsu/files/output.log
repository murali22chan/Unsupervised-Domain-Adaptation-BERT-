Experiment Details
Training Data: finance Testing Data: medicine Training Sequnce Length: 128 Testing Sequence Length: 32
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.bias', 'cls.predictions.decoder.weight', 'cls.predictions.transform.dense.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
  0%|                                                                                                                                                                                     | 0/3 [00:03<?, ?it/s]
Traceback (most recent call last):
  File "D:\Thesis\Domain Adaptation (Unsupervised DA through backpropagation)\main.py", line 465, in <module>
    valid_loss, val_preds = evaluate(val_dataloader)
  File "D:\Thesis\Domain Adaptation (Unsupervised DA through backpropagation)\main.py", line 289, in evaluate
    loss, preds = model(sent_id, mask)
  File "C:\Users\mural\Envs\ML\lib\site-packages\torch\nn\modules\module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "D:\Thesis\Domain Adaptation (Unsupervised DA through backpropagation)\main.py", line 89, in forward
    human_machine_loss = human_machine_loss_fn(human_machine_logits, human_machine_labels)
  File "C:\Users\mural\Envs\ML\lib\site-packages\torch\nn\modules\module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "C:\Users\mural\Envs\ML\lib\site-packages\torch\nn\modules\loss.py", line 1174, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "C:\Users\mural\Envs\ML\lib\site-packages\torch\nn\functional.py", line 3026, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
TypeError: cross_entropy_loss(): argument 'target' (position 2) must be Tensor, not NoneType